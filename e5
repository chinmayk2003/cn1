#server code###################
import socket
import os

# Server configuration
SERVER_HOST = '0.0.0.0'  # Listen on all available interfaces
SERVER_PORT = 5001       # Port to listen on
BUFFER_SIZE = 4096       # Buffer size for file transfer
SEPARATOR = "<SEPARATOR>"  # Separator for message components

def start_server(file_path):
    # Create server socket
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((SERVER_HOST, SERVER_PORT))
    server_socket.listen(1)
    print(f"[*] Listening on {SERVER_HOST}:{SERVER_PORT}")

    # Accept client connection
    client_socket, client_address = server_socket.accept()
    print(f"[+] {client_address} connected.")

    # Step 1: Say hello
    client_socket.send("Hello from server!".encode())
    hello_message = client_socket.recv(BUFFER_SIZE).decode()
    print(f"[Client] {hello_message}")

    # Step 2: File transfer
    if os.path.isfile(file_path):
        file_size = os.path.getsize(file_path)
        client_socket.send(f"{file_path}{SEPARATOR}{file_size}".encode())

        # Send file content
        with open(file_path, "rb") as file:
            while (bytes_read := file.read(BUFFER_SIZE)):
                client_socket.sendall(bytes_read)
        print(f"[+] File '{file_path}' sent successfully.")
    else:
        print("[!] File does not exist.")

    # Close connection
    client_socket.close()
    server_socket.close()

# Specify the file path to send
file_path = "path/to/your/file.txt"  # Replace with the file path you want to send
start_server(file_path)


###client code##################################
import socket
import os

# Client configuration
SERVER_HOST = '127.0.0.1'  # Server's IP address, change to the server IP if on a different machine
SERVER_PORT = 5001         # Must match the server's port
BUFFER_SIZE = 4096         # Buffer size for receiving file content
SEPARATOR = "<SEPARATOR>"

def start_client():
    # Create client socket
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((SERVER_HOST, SERVER_PORT))
    print(f"[+] Connected to {SERVER_HOST}:{SERVER_PORT}")

    # Step 1: Receive hello message and reply
    hello_message = client_socket.recv(BUFFER_SIZE).decode()
    print(f"[Server] {hello_message}")
    client_socket.send("Hello from client!".encode())

    # Step 2: Receive file
    received = client_socket.recv(BUFFER_SIZE).decode()
    file_name, file_size = received.split(SEPARATOR)
    file_name = os.path.basename(file_name)
    file_size = int(file_size)

    with open(file_name, "wb") as file:
        bytes_received = 0
        while bytes_received < file_size:
            bytes_read = client_socket.recv(BUFFER_SIZE)
            if not bytes_read:
                break
            file.write(bytes_read)
            bytes_received += len(bytes_read)

    print(f"[+] File '{file_name}' received successfully.")

    # Close connection
    client_socket.close()

start_client()





#############################################################################################################
#EXP6
 ##########Server code(receiver)
 # udp_file_server.py
import socket

def receive_file(server_ip, server_port, output_file):
    # Set up the server socket
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    server_socket.bind((server_ip, server_port))
    print(f"Server listening on {server_ip}:{server_port}")

    with open(output_file, 'wb') as f:
        while True:
            # Receive data packets
            data, client_address = server_socket.recvfrom(4096)
            
            # End transmission when receiving "EOF"
            if data == b'EOF':
                print("File transfer complete.")
                break
            
            # Write the received data to the file
            f.write(data)
            
            # Send acknowledgment to client
            server_socket.sendto(b'ACK', client_address)

    server_socket.close()

if __name__ == "__main__":
    SERVER_IP = "127.0.0.1"  # Change to server IP
    SERVER_PORT = 12345
    OUTPUT_FILE = "received_file.txt"  # Output file name

    receive_file(SERVER_IP, SERVER_PORT, OUTPUT_FILE)




##############client code(sender)
# udp_file_client.py
import socket
import time

def send_file(file_path, server_ip, server_port):
    # Set up the client socket
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    client_socket.settimeout(1)  # Set timeout for acknowledgment

    with open(file_path, 'rb') as f:
        while True:
            # Read and send data in chunks
            data = f.read(4096)
            if not data:
                break  # EOF reached
            
            # Send data chunk to the server
            client_socket.sendto(data, (server_ip, server_port))
            
            # Wait for acknowledgment
            try:
                ack, _ = client_socket.recvfrom(1024)
                if ack != b'ACK':
                    print("Acknowledgment not received, resending data.")
                    client_socket.sendto(data, (server_ip, server_port))
            except socket.timeout:
                print("Timeout reached, resending data.")
                client_socket.sendto(data, (server_ip, server_port))

        # Signal end of file transmission
        client_socket.sendto(b'EOF', (server_ip, server_port))
        print("File sent successfully.")

    client_socket.close()

if __name__ == "__main__":
    FILE_PATH = "sample_file.txt"  # Path to the file to send
    SERVER_IP = "127.0.0.1"  # Change to server IP
    SERVER_PORT = 12345

    send_file(FILE_PATH, SERVER_IP, SERVER_PORT)





